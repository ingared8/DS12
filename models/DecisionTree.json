{"paragraphs":[{"text":"import org.apache.spark.mllib.linalg._\nimport org.apache.spark.mllib.regression._\nval rawData = sc.textFile(\"file:/home/hadoop/data/covtype.data.gz\")","dateUpdated":"Jun 14, 2016 6:38:01 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1465926022122_-1484073749","id":"20160614-174022_807578436","result":{"code":"SUCCESS","type":"TEXT","msg":"import org.apache.spark.mllib.linalg._\nimport org.apache.spark.mllib.regression._\nrawData: org.apache.spark.rdd.RDD[String] = file:/home/hadoop/data/covtype.data.gz MapPartitionsRDD[91] at textFile at <console>:140\n"},"dateCreated":"Jun 14, 2016 5:40:22 PM","dateStarted":"Jun 14, 2016 6:38:01 PM","dateFinished":"Jun 14, 2016 6:38:04 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:46"},{"text":"println(rawData.count)","dateUpdated":"Jun 14, 2016 6:38:01 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1465926391050_1644121096","id":"20160614-174631_679822127","result":{"code":"SUCCESS","type":"TEXT","msg":"581012\n"},"dateCreated":"Jun 14, 2016 5:46:31 PM","dateStarted":"Jun 14, 2016 6:38:02 PM","dateFinished":"Jun 14, 2016 6:38:12 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:47"},{"text":"rawData.map(_.split(',')(11)).countByValue().toSeq.sortBy(_._2).foreach(println)","dateUpdated":"Jun 14, 2016 6:38:01 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1465926508291_-1158219682","id":"20160614-174828_1058068874","result":{"code":"SUCCESS","type":"TEXT","msg":"(1,29884)\n(0,551128)\n"},"dateCreated":"Jun 14, 2016 5:48:28 PM","dateStarted":"Jun 14, 2016 6:38:04 PM","dateFinished":"Jun 14, 2016 6:38:17 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:48"},{"text":"val data = rawData.map { line =>\nval values = line.split(',').map(_.toDouble)\nval featureVector = Vectors.dense(values.init)\nval label = values.last - 1\nLabeledPoint(label, featureVector)\n}","dateUpdated":"Jun 14, 2016 6:38:02 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1465926719275_-1195834773","id":"20160614-175159_470274784","result":{"code":"SUCCESS","type":"TEXT","msg":"data: org.apache.spark.rdd.RDD[org.apache.spark.mllib.regression.LabeledPoint] = MapPartitionsRDD[96] at map at <console>:142\n"},"dateCreated":"Jun 14, 2016 5:51:59 PM","dateStarted":"Jun 14, 2016 6:38:13 PM","dateFinished":"Jun 14, 2016 6:38:18 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:49","focus":true},{"text":"data","dateUpdated":"Jun 14, 2016 6:38:02 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1465927493454_-2141432078","id":"20160614-180453_1183995164","result":{"code":"SUCCESS","type":"TEXT","msg":"res58: org.apache.spark.rdd.RDD[org.apache.spark.mllib.regression.LabeledPoint] = MapPartitionsRDD[96] at map at <console>:142\n"},"dateCreated":"Jun 14, 2016 6:04:53 PM","dateStarted":"Jun 14, 2016 6:38:18 PM","dateFinished":"Jun 14, 2016 6:38:19 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:50"},{"text":"val splits = data.randomSplit(Array(0.7, 0.3))\nval (trainData, testData) = (splits(0), splits(1))\nval trainsplit = trainData.randomSplit(Array(0.15,0.85))\nval cvData = trainsplit(0)","dateUpdated":"Jun 14, 2016 6:55:14 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1465927509032_256353716","id":"20160614-180509_853133620","result":{"code":"SUCCESS","type":"TEXT","msg":"splits: Array[org.apache.spark.rdd.RDD[org.apache.spark.mllib.regression.LabeledPoint]] = Array(MapPartitionsRDD[170] at randomSplit at <console>:153, MapPartitionsRDD[171] at randomSplit at <console>:153)\ntrainData: org.apache.spark.rdd.RDD[org.apache.spark.mllib.regression.LabeledPoint] = MapPartitionsRDD[170] at randomSplit at <console>:153\ntestData: org.apache.spark.rdd.RDD[org.apache.spark.mllib.regression.LabeledPoint] = MapPartitionsRDD[171] at randomSplit at <console>:153\ntrainsplit: Array[org.apache.spark.rdd.RDD[org.apache.spark.mllib.regression.LabeledPoint]] = Array(MapPartitionsRDD[172] at randomSplit at <console>:149, MapPartitionsRDD[173] at randomSplit at <console>:149)\ncvData: org.apache.spark.rdd.RDD[org.apache.spark.mllib.regression.LabeledPoint] = MapPartitionsRDD[172] at randomSplit at <console>:149\n"},"dateCreated":"Jun 14, 2016 6:05:09 PM","dateStarted":"Jun 14, 2016 6:55:14 PM","dateFinished":"Jun 14, 2016 6:55:16 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:51","focus":true},{"text":"val numClasses = 7\nval categoricalFeaturesInfo = Map[Int, Int]()\nval impurity1 = \"gini\"\nval maxDepth = 3\nval maxBins = 32","dateUpdated":"Jun 14, 2016 6:38:02 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1465927552095_1347763752","id":"20160614-180552_670880766","result":{"code":"SUCCESS","type":"TEXT","msg":"numClasses: Int = 7\ncategoricalFeaturesInfo: scala.collection.immutable.Map[Int,Int] = Map()\nimpurity1: String = gini\nmaxDepth: Int = 3\nmaxBins: Int = 32\n"},"dateCreated":"Jun 14, 2016 6:05:52 PM","dateStarted":"Jun 14, 2016 6:38:19 PM","dateFinished":"Jun 14, 2016 6:38:22 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:52"},{"text":"import org.apache.spark.mllib.evaluation._\nimport org.apache.spark.mllib.tree.model._\nimport org.apache.spark.rdd._\nval model = DecisionTree.trainClassifier(trainData, numClasses,\n categoricalFeaturesInfo, impurity1, maxDepth, maxBins)","dateUpdated":"Jun 14, 2016 6:38:02 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1465927585874_-1482803258","id":"20160614-180625_735164739","result":{"code":"SUCCESS","type":"TEXT","msg":"import org.apache.spark.mllib.evaluation._\nimport org.apache.spark.mllib.tree.model._\nimport org.apache.spark.rdd._\nmodel: org.apache.spark.mllib.tree.model.DecisionTreeModel = DecisionTreeModel classifier of depth 3 with 15 nodes\n"},"dateCreated":"Jun 14, 2016 6:06:25 PM","dateStarted":"Jun 14, 2016 6:38:20 PM","dateFinished":"Jun 14, 2016 6:38:46 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:53"},{"text":"val labelAndPreds = testData.map { point =>\n  val prediction = model.predict(point.features)\n  (prediction,point.label)\n}\nval testErr = labelAndPreds.filter(r => r._1 != r._2).count.toDouble / testData.count()","dateUpdated":"Jun 14, 2016 6:49:07 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1465928306980_2115197125","id":"20160614-181826_1306801171","result":{"code":"SUCCESS","type":"TEXT","msg":"labelAndPreds: org.apache.spark.rdd.RDD[(Double, Double)] = MapPartitionsRDD[154] at map at <console>:163\ntestErr: Double = 0.3234420852753323\n"},"dateCreated":"Jun 14, 2016 6:18:26 PM","dateStarted":"Jun 14, 2016 6:49:07 PM","dateFinished":"Jun 14, 2016 6:49:18 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:54","focus":true},{"text":"println(\"Test Error = \" + testErr)\nval metrics = new MulticlassMetrics(labelAndPreds)\nmetrics.labels\nmetrics.confusionMatrix\nmetrics.precision\n\n","dateUpdated":"Jun 14, 2016 6:56:21 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1465928402721_-1293572506","id":"20160614-182002_580939394","result":{"code":"ERROR","type":"TEXT","msg":"Test Error = 0.3234420852753323\nmetrics: org.apache.spark.mllib.evaluation.MulticlassMetrics = org.apache.spark.mllib.evaluation.MulticlassMetrics@2f4ab682\nres86: Array[Double] = Array(0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0)\nres87: org.apache.spark.mllib.linalg.Matrix = \n44635.0  16577.0  14.0    0.0  0.0  0.0  2229.0  \n21575.0  61082.0  1712.0  0.0  0.0  0.0  172.0   \n0.0      1895.0   8858.0  0.0  0.0  0.0  0.0     \n0.0      0.0      827.0   0.0  0.0  0.0  0.0     \n0.0      2756.0   98.0    0.0  0.0  0.0  0.0     \n0.0      1129.0   4003.0  0.0  0.0  0.0  0.0     \n3192.0   32.0     0.0     0.0  0.0  0.0  3004.0  \nres88: Double = 0.6765579147246678\n(0,0.6431370853865883,0.7034118666771728)\n(1,0.7317751075223731,0.722513336724193)\n(2,0.5710417741103662,0.8237701106667906)\n(3,0.0,0.0)\n(4,0.0,0.0)\n(5,0.0,0.0)\n(6,0.555781683626272,0.48233782915863843)\n<console>:169: error: value categoricalFeaturesInfo is not a member of Int\n             trainData, numClasses categoricalFeaturesInfo impurity, depth, bins)\n                                   ^\n<console>:170: error: not found: value cvData\n         val predictionsAndLabels = cvData.map(example => (model.predict(example.features), example.label))\n                                    ^\n"},"dateCreated":"Jun 14, 2016 6:20:02 PM","dateStarted":"Jun 14, 2016 6:49:32 PM","dateFinished":"Jun 14, 2016 6:49:56 PM","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:55","focus":true},{"text":"(0 until 7).map(\ncat => (cat, metrics.precision(cat), metrics.recall(cat))\n    ).foreach(println)\n\n","dateUpdated":"Jun 14, 2016 7:02:24 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorHide":false,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1465927992305_-691008635","id":"20160614-181312_1029610363","result":{"code":"SUCCESS","type":"TEXT","msg":"(0,0.6431370853865883,0.7034118666771728)\n(1,0.7317751075223731,0.722513336724193)\n(2,0.5710417741103662,0.8237701106667906)\n(3,0.0,0.0)\n(4,0.0,0.0)\n(5,0.0,0.0)\n(6,0.555781683626272,0.48233782915863843)\n"},"dateCreated":"Jun 14, 2016 6:13:12 PM","dateStarted":"Jun 14, 2016 7:02:24 PM","dateFinished":"Jun 14, 2016 7:02:25 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:56","focus":true},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1465930526480_-775482135","id":"20160614-185526_1084750379","dateCreated":"Jun 14, 2016 6:55:26 PM","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:374","dateUpdated":"Jun 14, 2016 7:07:45 PM","dateFinished":"Jun 14, 2016 7:07:46 PM","dateStarted":"Jun 14, 2016 7:07:45 PM","result":{"code":"ERROR","type":"TEXT","msg":"<console>:175: error: value categoricalFeaturesInfo is not a member of Int\n             trainData, numClasses categoricalFeaturesInfo impurity, depth, bins)\n                                   ^\n<console>:177: error: value _1 is not a member of Nothing\n       val accuracy = predictionsAndLabels.filter(r => r._1 != r._2).count.toDouble / trainData.count()\n                                                         ^\n<console>:178: error: type mismatch;\n found   : org.apache.spark.rdd.RDD[Nothing]\n required: org.apache.spark.rdd.RDD[(Double, Double)]\nNote: Nothing <: (Double, Double), but class RDD is invariant in type T.\nYou may wish to define T as +T instead. (SLS 4.5)\n       new MulticlassMetrics(predictionsAndLabels).precision\n                             ^\n<console>:174: error: overloaded method value trainClassifier with alternatives:\n  (input: org.apache.spark.api.java.JavaRDD[org.apache.spark.mllib.regression.LabeledPoint],numClasses: Int,categoricalFeaturesInfo: java.util.Map[Integer,Integer],impurity: String,maxDepth: Int,maxBins: Int)org.apache.spark.mllib.tree.model.DecisionTreeModel <and>\n  (input: org.apache.spark.rdd.RDD[org.apache.spark.mllib.regression.LabeledPoint],numClasses: Int,categoricalFeaturesInfo: scala.collection.immutable.Map[Int,Int],impurity: String,maxDepth: Int,maxBins: Int)org.apache.spark.mllib.tree.model.DecisionTreeModel\n cannot be applied to (org.apache.spark.rdd.RDD[org.apache.spark.mllib.regression.LabeledPoint], <error>, Int, Int)\n         val model = DecisionTree.trainClassifier(\n                                  ^\n<console>:172: error: type mismatch;\n found   : Array[Nothing]\n required: scala.collection.GenTraversableOnce[?]\n         bins <- Array(10, 300))\n              ^\n<console>:171: error: type mismatch;\n found   : Array[Nothing]\n required: scala.collection.GenTraversableOnce[?]\n         depth <- Array(1, 20);\n               ^\n"},"text":"val evaluations =\nfor (impurity <- Array(\"gini\", \"entropy\");\n  depth <- Array(1, 20);\n  bins <- Array(10, 300))\nyield {\n  val model = DecisionTree.trainClassifier(\n      trainData, numClasses categoricalFeaturesInfo impurity, depth, bins)\n  val predictionsAndLabels = cvData.map(example => (model.predict(example.features), example.label))\nval accuracy = predictionsAndLabels.filter(r => r._1 != r._2).count.toDouble / trainData.count()\nnew MulticlassMetrics(predictionsAndLabels).precision\n          ((impurity, depth, bins), accuracy)\n        }\nevaluations.sortBy(_._2).reverse.foreach(println)"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1465930960525_584666524","id":"20160614-190240_1524293143","dateCreated":"Jun 14, 2016 7:02:40 PM","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:435"}],"name":"Note_Example1","id":"2BP582XAQ","angularObjects":{"2B44YVSN1":[],"2AJXGMUUJ":[],"2AK8P7CPX":[],"2AM1YV5CU":[],"2AKK3QQXU":[],"2ANGGHHMQ":[]},"config":{"looknfeel":"default"},"info":{}}